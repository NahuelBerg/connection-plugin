{"version":3,"file":"connection-plugin.min.js","sources":["../src/utils.ts","../src/picker.ts","../src/index.ts"],"sourcesContent":["import { Emitter, Connection } from 'rete';\r\n\r\nfunction toTrainCase(str: string) {\r\n    return str.toLowerCase().replace(/ /g, '-');\r\n}\r\n\r\nexport function defaultPath(points: number[], curvature: number) {\r\n    const [x1, y1, x2, y2] = points;\r\n    const hx1 = x1 + Math.abs(x2 - x1) * curvature;\r\n    const hx2 = x2 - Math.abs(x2 - x1) * curvature;\r\n\r\n    return `M ${x1} ${y1} C ${hx1} ${y1} ${hx2} ${y2} ${x2} ${y2}`;\r\n}\r\n\r\nexport function renderPathData(emitter: Emitter, points: number[], connection?: Connection) {\r\n    const data = { points, connection, d: '' };\r\n    \r\n    emitter.trigger('connectionpath', data);\r\n    \r\n    return data.d || defaultPath(points, 0.4);\r\n}\r\n\r\nexport function updateConnection({ el, d } : { el: HTMLElement, d: string }) {\r\n    const path = el.querySelector('.connection path');\r\n\r\n    if (!path) throw new Error('Path of connection was broken');\r\n\r\n    path.setAttribute('d', d);\r\n}\r\n\r\nexport function renderConnection({ el, d, connection } : { el: HTMLElement, d: string, connection?: Connection }) {\r\n    const classed = !connection?[]:[\r\n        'input-' + toTrainCase(connection.input.name),\r\n        'output-' + toTrainCase(connection.output.name),\r\n        'socket-input-' + toTrainCase(connection.input.socket.name),\r\n        'socket-output-' + toTrainCase(connection.output.socket.name)\r\n    ];\r\n\r\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\r\n\r\n    svg.classList.add('connection', ...classed);\r\n    path.classList.add('main-path');\r\n    path.setAttribute('d', d);\r\n\r\n    svg.appendChild(path);\r\n    el.appendChild(svg);\r\n\r\n    updateConnection({ el, d });\r\n}","import { NodeEditor, Input, Output, Connection } from 'rete';\r\nimport { renderConnection, renderPathData, updateConnection } from './utils';\r\n\r\nexport class Picker {\r\n\r\n    private el: HTMLElement;\r\n    private editor: NodeEditor;\r\n    private _output: Output | null = null;\r\n\r\n    constructor(editor: NodeEditor) {\r\n        this.el = document.createElement('div');\r\n        this.editor = editor;\r\n    }\r\n\r\n    get output() : Output | null {\r\n        return this._output;\r\n    }\r\n\r\n    set output(val) {\r\n        const { area } = this.editor.view;\r\n\r\n        this._output = val;\r\n        if (val !== null) {\r\n            area.appendChild(this.el);\r\n            this.renderConnection();\r\n        } else if (this.el.parentElement) {\r\n            area.removeChild(this.el)\r\n            this.el.innerHTML = '';\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.output = null;\r\n    }\r\n\r\n    pickOutput(output: Output) {\r\n        if (this.output) this.reset();\r\n        \r\n        this.output = output;\r\n    }\r\n\r\n    // eslint-disable-next-line max-statements\r\n    pickInput(input: Input) {\r\n        if (this.output === null) {\r\n            if (input.hasConnection()) {\r\n                this.output = input.connections[0].output;\r\n                this.editor.removeConnection(input.connections[0]);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        if (!input.multipleConnections && input.hasConnection())\r\n            this.editor.removeConnection(input.connections[0]);\r\n        \r\n        if (!this.output.multipleConnections && this.output.hasConnection())\r\n            this.editor.removeConnection(this.output.connections[0]);\r\n        \r\n        if (this.output.connectedTo(input)) {\r\n            let connection = input.connections.find(c => c.output === this.output);\r\n\r\n            if(connection) {\r\n                this.editor.removeConnection(connection);\r\n            }\r\n        }\r\n\r\n        this.editor.connect(this.output, input);\r\n        this.reset();\r\n    }\r\n\r\n    pickConnection(connection: Connection) {\r\n        const { output } = connection;\r\n\r\n        this.editor.removeConnection(connection);\r\n        this.output = output;\r\n    }\r\n\r\n    private getPoints(output: Output): number[] {\r\n        const mouse = this.editor.view.area.mouse;\r\n\r\n        if(!output.node) throw new Error('Node in output not found')\r\n    \r\n        const node = this.editor.view.nodes.get(output.node);\r\n\r\n        if(!node) throw new Error('Node view not found')\r\n    \r\n        const [x1, y1] = node.getSocketPosition(output);\r\n\r\n        return [x1, y1, mouse.x, mouse.y];\r\n    }\r\n\r\n    updateConnection() {\r\n        if (!this.output) return;\r\n\r\n        const d = renderPathData(this.editor, this.getPoints(this.output));\r\n\r\n        updateConnection({ el: this.el, d });\r\n    }\r\n\r\n    renderConnection() {\r\n        if (!this.output) return;\r\n\r\n        const d = renderPathData(this.editor, this.getPoints(this.output));\r\n\r\n        renderConnection({ el: this.el, d });\r\n    }\r\n\r\n}","import { IO, Input, Output, NodeEditor } from 'rete';\r\nimport { renderConnection, renderPathData, updateConnection } from './utils';\r\nimport { Picker } from './picker';\r\nimport './index.sass';\r\n\r\ntype FlowParams = { input: Input | null, output: Output | null };\r\ninterface FlowElement extends Element {\r\n    _reteConnectionPlugin: FlowParams\r\n};\r\n\r\nclass Flow {\r\n\r\n    public picker: Picker;\r\n    public target: IO | null = null;\r\n\r\n    constructor(picker: Picker) {\r\n        this.picker = picker;\r\n        this.target = null;\r\n    }\r\n\r\n    act({ input, output }: FlowParams = { input: null, output: null }) {\r\n        if (this.unlock(input || output)) return\r\n\r\n        if (input)\r\n            this.picker.pickInput(input)\r\n        else if (output)\r\n            this.picker.pickOutput(output)\r\n        else\r\n            this.picker.reset();\r\n    }\r\n\r\n    once(params: FlowParams, io: IO) {\r\n        this.act(params);\r\n        this.target = io;\r\n    }\r\n\r\n    unlock(io: IO | null) {\r\n        const target = this.target;\r\n\r\n        this.target = null;\r\n\r\n        return target && target === io;\r\n    }\r\n}\r\n\r\nfunction install(editor: NodeEditor) {\r\n    editor.bind('connectionpath');\r\n    \r\n    const picker = new Picker(editor);\r\n    const flow = new Flow(picker);\r\n    \r\n    editor.on('rendersocket', ({ el, input, output } : { el: FlowElement, input: Input, output: Output }) => {\r\n        el._reteConnectionPlugin = { input, output };\r\n\r\n        el.addEventListener('pointerdown', e => {\r\n            editor.view.container.dispatchEvent(new PointerEvent('pointermove', e));\r\n            e.stopPropagation();\r\n            flow.once(el._reteConnectionPlugin, input);\r\n        });\r\n    });\r\n\r\n    window.addEventListener('pointerup', e => {\r\n        const el = document.elementFromPoint(e.clientX, e.clientY);\r\n\r\n        if(el) {\r\n            flow.act((el as FlowElement)._reteConnectionPlugin)\r\n        }\r\n    });\r\n\r\n    editor.on('mousemove', () => picker.updateConnection());\r\n\r\n    editor.on('renderconnection', ({ el, connection, points }) => {\r\n        const d = renderPathData(editor, points, connection);\r\n\r\n        renderConnection({ el, d, connection })\r\n    });\r\n\r\n    editor.on('updateconnection', ({ el, connection, points }) => {\r\n        const d = renderPathData(editor, points, connection);\r\n\r\n        updateConnection({ el, d });\r\n    });\r\n}\r\n\r\nexport default {\r\n    name: 'connection',\r\n    install\r\n}\r\nexport { defaultPath } from './utils';"],"names":["toTrainCase","str","toLowerCase","replace","defaultPath","points","curvature","x1","y1","x2","y2","hx1","Math","abs","hx2","renderPathData","emitter","connection","data","d","trigger","updateConnection","el","path","querySelector","Error","setAttribute","renderConnection","classed","input","name","output","socket","svg","document","createElementNS","classList","add","appendChild","Picker","editor","createElement","this","reset","hasConnection","connections","removeConnection","multipleConnections","connectedTo","find","c","_this","connect","mouse","view","area","node","nodes","get","getSocketPosition","x","y","getPoints","_output","val","parentElement","removeChild","innerHTML","Flow","picker","target","unlock","pickInput","pickOutput","params","io","act","install","bind","flow","on","_reteConnectionPlugin","addEventListener","e","container","dispatchEvent","PointerEvent","stopPropagation","once","window","elementFromPoint","clientX","clientY"],"mappings":"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"}